# -*- coding: utf-8 -*-
#   Copyright (C) The TONA Authors
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>.

from fastapi.testclient import TestClient
from tona.server import app
from tona.apps.drive.services.localsync import LocalSync

client = TestClient(app)


def xtest_post_drive_folders():
    data = {
        "name": "Tona Drive"
    }
    response = client.post("/api/v1/drive/folders", json=data)
    assert response.status_code == 200

def test_get_drive_folders():
    response = client.get("/api/v1/drive/folders")
    import pdb; pdb.set_trace()
    assert response.status_code == 200

def xtest_post_drive_files():
    data = {
        "name": "Tona Logo",
        "mimetype": "image/png",
        "file": ""
    }
    response = client.post("/api/v1/drive/files", json=data)
    assert response.status_code == 200

def xtest_get_drive_files():
    response = client.get("/api/v1/drive/files")
    assert response.status_code == 200


def xtest_localsync():
    o = LocalSync("data/drive")
    o.sync()
